import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:lottie/lottie.dart';
import 'package:flutter/services.dart';
import 'dart:math' as math;

class AIAssistantPage extends StatefulWidget {
  const AIAssistantPage({super.key});

  @override
  State<AIAssistantPage> createState() => _AIAssistantPageState();
}

class _AIAssistantPageState extends State<AIAssistantPage>
    with TickerProviderStateMixin {
  late AnimationController _fadeController;
  late AnimationController _pulseController;
  late AnimationController _typingController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _pulseAnimation;
  late Animation<double> _typingAnimation;
  
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
   final FlutterTts _flutterTts = FlutterTts();
  
  List<ChatMessage> messages = [];
  bool isTyping = false;
  bool isSpeaking = false;
  String selectedLanguage = 'en-US';
  String currentSpeakingMessage = '';
  
  final List<String> quickAccessQuestions = [
    "What are the current trending issues in Tamil Nadu?",
    "How should I handle negative media coverage?",
    "What talking points should I use for healthcare policy?",
    "How can I improve public sentiment in my constituency?",
    "What are the key issues affecting youth voters?",
    "How should I respond to opposition criticism?",
    "What development projects should I prioritize?",
    "How can I address environmental concerns effectively?"
  ];

  @override
  void initState() {
    super.initState();
    
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );
    
    _typingController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );
    
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _fadeController, curve: Curves.easeOut),
    );
    
    _pulseAnimation = Tween<double>(begin: 1.0, end: 1.1).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
    
    _typingAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _typingController, curve: Curves.easeInOut),
    );
    
    _fadeController.forward();
    _pulseController.repeat(reverse: true);
    
    // Add welcome message
    _addWelcomeMessage();
    _initTts();
  }

  // NEW: Setup TTS listeners
  void _initTts() {
    _flutterTts.setStartHandler(() {
      if (mounted) {
        setState(() {
          isSpeaking = true;
        });
      }
    });

    _flutterTts.setCompletionHandler(() {
      if (mounted) {
        setState(() {
          isSpeaking = false;
          currentSpeakingMessage = '';
        });
      }
    });

    _flutterTts.setErrorHandler((msg) {
      if (mounted) {
        setState(() {
          isSpeaking = false;
          currentSpeakingMessage = '';
        });
      }
    });
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _pulseController.dispose();
    _typingController.dispose();
    _messageController.dispose();
    _scrollController.dispose();
    @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(
            Icons.arrow_back_ios_new,
            color: Colors.blue,
          ),
          onPressed: () => Navigator.of(context).pop(),
        ),
        backgroundColor: Colors.white,
        centerTitle: false,
        title: const Text(
          'Klydra AI Assistant',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: Color.fromARGB(255, 1, 46, 117),
            fontSize: 25,
          ),
        ),
        // NEW: Language selection menu
        actions: [
          PopupMenuButton<String>(
            icon: const Icon(Icons.language, color: Colors.blue),
            onSelected: (String languageCode) {
              setState(() {
                selectedLanguage = languageCode;
              });
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                content: Text(
                    'Language changed to ${languageCode == 'en-US' ? 'English' : 'Tamil'}'),
              ));
            },
            itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
              const PopupMenuItem<String>(
                value: 'en-US',
                child: Text('English'),
              ),
              const PopupMenuItem<String>(
                value: 'ta-IN',
                child: Text('родрооро┐ро┤рпН (Tamil)'),
              ),
            ],
          ),
        ],
      ),
      backgroundColor: const Color(0xFFF8FAFC),
      body: SafeArea(
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: Column(
            children: [
              _buildQuickAccessQuestions(),
              Expanded(child: _buildChatArea()),
              _buildInputArea(),
            ],
          ),
        ),
      ),
    );
  }
    super.dispose();
  }

 void _addWelcomeMessage() {
    // MODIFIED: Welcome message is now in Tamil
    messages.add(ChatMessage(
      text: "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН роХрпИродрпНро░ро╛ AI роЕро░роЪро┐ропро▓рпН роЙродро╡ро┐ропро╛ро│ро░рпН. роЙроЩрпНроХро│рпБроХрпНроХрпБ роЕро░роЪро┐ропро▓рпН роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпН рооро▒рпНро▒рпБроорпН ро╡ро┐ропрпВроХ роЖро▓рпЛроЪройрпИроХро│рпН ро╡ро┤роЩрпНроХ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. роЗройрпНро▒рпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ роиро╛ройрпН роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?",
      isUser: false,
      timestamp: DateTime.now(),
    ));
  }


  Future<void> _sendMessage(String text) async {
    if (text.trim().isEmpty) return;

    setState(() {
      messages.add(ChatMessage(
        text: text,
        isUser: true,
        timestamp: DateTime.now(),
      ));
      isTyping = true;
    });

    _messageController.clear();
    _scrollToBottom();
    _typingController.repeat();

    // Simulate AI response delay
    await Future.delayed(const Duration(seconds: 2));

    final response = _generateAIResponse(text);
    
    setState(() {
      isTyping = false;
      messages.add(ChatMessage(
        text: response,
        isUser: false,
        timestamp: DateTime.now(),
      ));
    });
    
    _typingController.stop();
    _scrollToBottom();
  }

  Future<void> _speakMessage(String message) async {
    if (isSpeaking) {
      await _flutterTts.stop();
      setState(() {
        isSpeaking = false;
        currentSpeakingMessage = '';
      });
    } else {
      setState(() {
        currentSpeakingMessage = message;
      });
      await _flutterTts.setLanguage(selectedLanguage);
      await _flutterTts.setPitch(1.0);
      await _flutterTts.setSpeechRate(0.5);
      await _flutterTts.speak(message);
    }
  }
String _generateAIResponse(String userMessage) {
    final message = userMessage.toLowerCase();

    if (message.contains('trending issues') || message.contains('current issues') || message.contains('рокро┐ро░роЪрпНроЪройрпИроХро│рпН')) {
      return """Current Trending Issues in Tamil Nadu (Today):

ЁЯФе Top Priority Issues:
1. Chennai Water Crisis - 15,420 mentions (+12%)
   - Immediate concern for 8M+ residents
   - Requires emergency water management

2. NEET Exam Controversy - 12,890 mentions (+25%)
   - Student protests continue
   - Language barrier concerns

3. Industrial Pollution in Cuddalore - 8,750 mentions (+8%)
   - Environmental health crisis
   - Local community outrage

Recommended Actions:
тЬЕ Address water crisis with immediate relief measures.
тЬЕ Engage with student communities on education policy.
тЬЕ Strengthen environmental protection laws.

Would you like detailed strategies for any specific issue?

--- (родрооро┐ро┤рпН) ---

родрооро┐ро┤рпНроиро╛роЯрпНроЯро┐ро▓рпН родро▒рпНрокрпЛродрпИроп роорпБроХрпНроХро┐роп рокро┐ро░роЪрпНроЪройрпИроХро│рпН:

ЁЯФе роЙропро░рпН роорпБройрпНройрпБро░ро┐роорпИ роЪро┐роХрпНроХро▓рпНроХро│рпН:
1.  роЪрпЖройрпНройрпИ роХрпБроЯро┐роирпАро░рпН рокро▒рпНро▒ро╛роХрпНроХрпБро▒рпИ - 15,420 роХрпБро▒ро┐рокрпНрокрпБроХро│рпН (+12%)
    - 8 рооро┐ро▓рпНро▓ро┐ропройрпБроХрпНроХрпБроорпН роЕродро┐роХрооро╛рой роХрпБроЯро┐ропро┐ро░рпБрокрпНрокро╛ро│ро░рпНроХро│рпБроХрпНроХрпБ роЙроЯройроЯро┐ роХро╡ро▓рпИ.
    - роЕро╡роЪро░ роирпАро░рпН роорпЗро▓ро╛рогрпНроорпИ родрпЗро╡рпИ.

2.  роирпАроЯрпН родрпЗро░рпНро╡рпБ роЪро░рпНроЪрпНроЪрпИ - 12,890 роХрпБро▒ро┐рокрпНрокрпБроХро│рпН (+25%)
    - рооро╛рогро╡ро░рпНроХро│рпН рокрпЛро░ро╛роЯрпНроЯроорпН родрпКроЯро░рпНроХро┐ро▒родрпБ.
    - роорпКро┤ро┐родрпН родроЯрпИ роХрпБро▒ро┐родрпНрод роХро╡ро▓рпИроХро│рпН.

3.  роХроЯро▓рпВро░ро┐ро▓рпН родрпКро┤ро┐ро▓рпНродрпБро▒рпИ рооро╛роЪрпБрокро╛роЯрпБ - 8,750 роХрпБро▒ро┐рокрпНрокрпБроХро│рпН (+8%)
    - роЪрпБро▒рпНро▒рпБроЪрпНроЪрпВро┤ро▓рпН роЪрпБроХро╛родро╛ро░ роирпЖро░рпБроХрпНроХроЯро┐.
    - роЙро│рпНро│рпВро░рпН роЪроорпВроХродрпНродро┐ройрпН роОродро┐ро░рпНрокрпНрокрпБ.

рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ роироЯро╡роЯро┐роХрпНроХрпИроХро│рпН:
тЬЕ роХрпБроЯро┐роирпАро░рпН рокро┐ро░роЪрпНроЪройрпИроХрпНроХрпБ роЙроЯройроЯро┐ роиро┐ро╡ро╛ро░рог роироЯро╡роЯро┐роХрпНроХрпИроХро│рпИ роорпЗро▒рпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН.
тЬЕ роХро▓рпНро╡ро┐ роХрпКро│рпНроХрпИ роХрпБро▒ро┐родрпНродрпБ рооро╛рогро╡ро░рпН роЪроорпВроХроЩрпНроХро│рпБроЯройрпН роХро▓роирпНродрпБро░рпИропро╛роЯрпБроЩрпНроХро│рпН.
тЬЕ роЪрпБро▒рпНро▒рпБроЪрпНроЪрпВро┤ро▓рпН рокро╛родрпБроХро╛рокрпНрокрпБ роЪроЯрпНроЯроЩрпНроХро│рпИ ро╡ро▓рпБрокрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН.

роЗроирпНрод роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ рокро┐ро░роЪрпНроЪро┐ройрпИроХро│ро┐ро▓рпН роПродрпЗройрпБроорпН ро╡ро┐ро░ро┐ро╡ро╛рой ро╡ро┐ропрпВроХроЩрпНроХро│рпН ро╡рпЗрогрпНроЯрпБрооро╛?""";
    }

    if (message.contains('meeting') || message.contains('speech') || message.contains('attract people')) {
      return """Meeting Strategy for Party Improvement:

ЁЯОп Key Talking Points:
1. Connect with Local Issues: Start with immediate concerns (water, power, transport) and share specific action plans.
2. Youth Engagement: Address education, employment, and digital governance.
3. Development Focus: Highlight infrastructure, healthcare, and agricultural support.

Communication Tips:
ЁЯЧгя╕П Use simple, relatable language.
ЁЯУК Present data with visual aids.
ЁЯдЭ Include interactive Q&A sessions.

Would you like me to prepare specific responses for potential questions?

--- (родрооро┐ро┤рпН) ---

роХроЯрпНроЪро┐ропрпИ роорпЗроорпНрокроЯрпБродрпНродрпБро╡родро▒рпНроХро╛рой роХрпВроЯрпНроЯ ро╡ро┐ропрпВроХроорпН:

ЁЯОп роорпБроХрпНроХро┐роп роЕроорпНроЪроЩрпНроХро│рпН:
1. роЙро│рпНро│рпВро░рпН рокро┐ро░роЪрпНроЪро┐ройрпИроХро│рпБроЯройрпН роЗрогрпИропрпБроЩрпНроХро│рпН: роЙроЯройроЯро┐ роХро╡ро▓рпИроХро│рпБроЯройрпН (роирпАро░рпН, рооро┐ройрпНроЪро╛ро░роорпН, рокрпЛроХрпНроХрпБро╡ро░родрпНродрпБ) родрпКроЯроЩрпНроХро┐, роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЪрпЖропро▓рпН родро┐роЯрпНроЯроЩрпНроХро│рпИрокрпН рокроХро┐ро░рпНроирпНродрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН.
2. роЗро│рпИроЮро░рпНроХро│рпИ роИроЯрпБрокроЯрпБродрпНродрпБродро▓рпН: роХро▓рпНро╡ро┐, ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ рооро▒рпНро▒рпБроорпН роЯро┐роЬро┐роЯрпНроЯро▓рпН роЖро│рпБроорпИ роХрпБро▒ро┐родрпНродрпБрокрпН рокрпЗроЪрпБроЩрпНроХро│рпН.
3. ро╡ро│ро░рпНроЪрпНроЪро┐ропро┐ро▓рпН роХро╡ройроорпН: роЙро│рпНроХроЯрпНроЯроорпИрокрпНрокрпБ, роЪрпБроХро╛родро╛ро░роорпН рооро▒рпНро▒рпБроорпН ро╡ро┐ро╡роЪро╛роп роЖродро░ро╡рпИ роорпБройрпНройро┐ро▓рпИрокрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН.

родроХро╡ро▓рпНродрпКроЯро░рпНрокрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН:
ЁЯЧгя╕П роОро│ро┐роп, родрпКроЯро░рпНрокрпБрокроЯрпБродрпНродроХрпНроХрпВроЯро┐роп роорпКро┤ро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН.
ЁЯУК родро░ро╡рпБроХро│рпИ роХро╛роЯрпНроЪро┐рокрпНрокроЯроЩрпНроХро│рпБроЯройрпН ро╡ро┤роЩрпНроХрпБроЩрпНроХро│рпН.
ЁЯдЭ роКроЯро╛роЯрпБроорпН роХрпЗро│рпНро╡ро┐-рокродро┐ро▓рпН роЕрооро░рпНро╡рпБроХро│рпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН.

роЪро╛родрпНродро┐ропрооро╛рой роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ роиро╛ройрпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ рокродро┐ро▓рпНроХро│рпИродрпН родропро╛ро░ро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБрооро╛?""";
    }

    if (message.contains('media') || message.contains('handle media') || message.contains('negative coverage')) {
      return """Media Management Strategy:

ЁЯЫбя╕П Handling Negative Coverage:
1. Immediate Response Protocol: Acknowledge concerns quickly and provide factual clarifications.
2. Proactive Measures: Hold regular press briefings and maintain a positive social media presence.
3. Crisis Communication: Appoint a dedicated spokesperson and focus on solutions.

Do's & Don'ts:
тЬЕ Stay factual and show empathy.
тЭМ Avoid personal attacks and making promises you can't keep.

Need help with specific media scenarios?

--- (родрооро┐ро┤рпН) ---

роКроЯроХ роорпЗро▓ро╛рогрпНроорпИ ро╡ро┐ропрпВроХроорпН:

ЁЯЫбя╕П роОродро┐ро░рпНрооро▒рпИ роЪрпЖропрпНродро┐роХро│рпИ роХрпИропро╛ро│рпБродро▓рпН:
1. роЙроЯройроЯро┐ рокродро┐ро▓рпН: роХро╡ро▓рпИроХро│рпИ ро╡ро┐ро░рпИро╡ро╛роХ роПро▒рпНро▒рпБроХрпНроХрпКрогрпНроЯрпБ, роЙрогрпНроорпИропро╛рой ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпИ ро╡ро┤роЩрпНроХрпБроЩрпНроХро│рпН.
2. роорпБройрпНройрпЖроЪрпНроЪро░ро┐роХрпНроХрпИ роироЯро╡роЯро┐роХрпНроХрпИроХро│рпН: ро╡ро┤роХрпНроХрооро╛рой рокродрпНродро┐ро░ро┐роХрпИропро╛ро│ро░рпН роЪроирпНродро┐рокрпНрокрпБроХро│рпИ роироЯродрпНродрпБроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роЪроорпВроХ роКроЯроХроЩрпНроХро│ро┐ро▓рпН роирпЗро░рпНрооро▒рпИропро╛рой роЗро░рпБрокрпНрокрпИ рокрпЗрогрпБроЩрпНроХро│рпН.
3. роирпЖро░рпБроХрпНроХроЯро┐ родрпКроЯро░рпНрокрпБ: роТро░рпБ рокро┐ро░родрпНропрпЗроХ роЪрпЖропрпНродро┐родрпН родрпКроЯро░рпНрокро╛ро│ро░рпИ роиро┐ропрооро┐родрпНродрпБ, родрпАро░рпНро╡рпБроХро│ро┐ро▓рпН роХро╡ройроорпН роЪрпЖро▓рпБродрпНродрпБроЩрпНроХро│рпН.

роЪрпЖропрпНроп ро╡рпЗрогрпНроЯро┐ропро╡рпИ & роЪрпЖропрпНропроХрпНроХрпВроЯро╛родро╡рпИ:
тЬЕ роЙрогрпНроорпИропро╛роХ роЗро░рпБроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН рокроЪрпНроЪро╛родро╛рокроорпН роХро╛роЯрпНроЯрпБроЩрпНроХро│рпН.
тЭМ родройро┐рокрпНрокроЯрпНроЯ родро╛роХрпНроХрпБродро▓рпНроХро│рпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН, роиро┐ро▒рпИро╡рпЗро▒рпНро▒ роорпБроЯро┐ропро╛род ро╡ро╛роХрпНроХрпБро▒рпБродро┐роХро│рпИ роЕро│ро┐рокрпНрокродрпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН.

роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роКроЯроХроЪрпН роЪрпВро┤рпНроиро┐ро▓рпИроХро│рпБроХрпНроХрпБ роЙродро╡ро┐ родрпЗро╡рпИропро╛?""";
    }

    if (message.contains('youth') || message.contains('young voters') || message.contains('students') || message.contains('роЗро│рпИроЮро░рпНроХро│рпН')) {
      return """Youth Engagement Strategy:

ЁЯСе Key Youth Issues:
1. Education & Employment: NEET concerns, tech jobs, skill development.
2. Digital Governance: Online service accessibility, startup support.
3. Infrastructure: Affordable housing, transportation.

Engagement Tactics:
ЁЯУ▒ Digital First Approach: Active social media, live Q&A sessions.
ЁЯОУ Education Focus: College campus visits, student council interactions.
ЁЯТ╝ Employment Initiatives: Job fairs, skill workshops.

Would you like specific content for youth-focused campaigns?

--- (родрооро┐ро┤рпН) ---

роЗро│рпИроЮро░рпНроХро│рпИроХрпН роХро╡ро░рпБроорпН роЙродрпНродро┐роХро│рпН:

ЁЯСе роЗро│рпИроЮро░рпНроХро│ро┐ройрпН роорпБроХрпНроХро┐роп рокро┐ро░роЪрпНроЪро┐ройрпИроХро│рпН:
1. роХро▓рпНро╡ро┐ рооро▒рпНро▒рпБроорпН ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ: роирпАроЯрпН родрпЗро░рпНро╡рпБ роХро╡ро▓рпИроХро│рпН, родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок ро╡рпЗро▓рпИроХро│рпН, родро┐ро▒ройрпН роорпЗроорпНрокро╛роЯрпБ.
2. роЯро┐роЬро┐роЯрпНроЯро▓рпН роЖро│рпБроорпИ: роЖройрпНро▓рпИройрпН роЪрпЗро╡рпИ роЕрогрпБроХро▓рпН, ро╕рпНроЯро╛ро░рпНроЯрпНроЕрокрпН роЖродро░ро╡рпБ.
3. роЙро│рпНроХроЯрпНроЯроорпИрокрпНрокрпБ: роХрпБро▒рпИроирпНрод ро╡ро┐ро▓рпИ ро╡рпАроЯрпБроХро│рпН, рокрпЛроХрпНроХрпБро╡ро░родрпНродрпБ.

роЪрпЖропро▓рпНрокро╛роЯрпНроЯрпБ роЙродрпНродро┐роХро│рпН:
ЁЯУ▒ роЯро┐роЬро┐роЯрпНроЯро▓рпН роЕрогрпБроХрпБроорпБро▒рпИ: родрпАро╡ро┐ро░ роЪроорпВроХ роКроЯроХ роЗро░рпБрокрпНрокрпБ, роирпЗро░роЯро┐ роХрпЗро│рпНро╡ро┐-рокродро┐ро▓рпН роЕрооро░рпНро╡рпБроХро│рпН.
ЁЯОУ роХро▓рпНро╡ро┐ропро┐ро▓рпН роХро╡ройроорпН: роХро▓рпНро▓рпВро░ро┐ ро╡ро│ро╛роХ ро╡ро░рпБроХрпИроХро│рпН, рооро╛рогро╡ро░рпН рооройрпНро▒ роХро▓роирпНродрпБро░рпИропро╛роЯро▓рпНроХро│рпН.
ЁЯТ╝ ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ роорпБропро▒рпНроЪро┐роХро│рпН: ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ роорпБроХро╛роорпНроХро│рпН, родро┐ро▒ройрпН рокроЯрпНроЯро▒рпИроХро│рпН.

роЗро│рпИроЮро░рпНроХро│рпИ роорпИропрооро╛роХроХрпН роХрпКрогрпНроЯ рокро┐ро░роЪрпНроЪро╛ро░роЩрпНроХро│рпБроХрпНроХрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЙро│рпНро│роЯроХрпНроХроЩрпНроХро│рпН ро╡рпЗрогрпНроЯрпБрооро╛?""";
    }

    if (message.contains('healthcare') || message.contains('health policy') || message.contains('medical')) {
      return """Healthcare Policy Talking Points:

ЁЯПе Priorities:
1. Accessibility: 24/7 primary health centers, mobile medical units, telemedicine.
2. Infrastructure: New hospitals, equipment upgrades.
3. Preventive Care: Health checkup camps, vaccination drives.

Success Stories:
тЬЕ 15 new primary health centers opened this year.
тЬЕ 40% increase in doctor-to-patient ratio.
тЬЕ Maternal mortality reduced by 25%.

Ready to discuss specific healthcare challenges?

--- (родрооро┐ро┤рпН) ---

роЪрпБроХро╛родро╛ро░роХрпН роХрпКро│рпНроХрпИроХрпНроХро╛рой роорпБроХрпНроХро┐роп роЕроорпНроЪроЩрпНроХро│рпН:

ЁЯПе роорпБройрпНройрпБро░ро┐роорпИроХро│рпН:
1. роЕрогрпБроХро▓рпН: 24/7 роЖро░роорпНрок роЪрпБроХро╛родро╛ро░ роиро┐ро▓рпИропроЩрпНроХро│рпН, роХро┐ро░ро╛роорокрпНрокрпБро▒роЩрпНроХро│рпБроХрпНроХрпБ роироЯрооро╛роЯрпБроорпН рооро░рпБродрпНродрпБро╡рокрпН рокро┐ро░ро┐ро╡рпБроХро│рпН, роЯрпЖро▓ро┐роорпЖроЯро┐роЪро┐ройрпН.
2. роЙро│рпНроХроЯрпНроЯроорпИрокрпНрокрпБ: рокрпБродро┐роп рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпН, роЙрокроХро░рогроЩрпНроХро│рпИ роорпЗроорпНрокроЯрпБродрпНродрпБродро▓рпН.
3. родроЯрпБрокрпНрокрпБрокрпН рокро╛родрпБроХро╛рокрпНрокрпБ: роЪрпБроХро╛родро╛ро░рокрпН рокро░ро┐роЪрпЛродройрпИ роорпБроХро╛роорпНроХро│рпН, родроЯрпБрокрпНрокрпВроЪро┐ роЗропроХрпНроХроЩрпНроХро│рпН.

ро╡рпЖро▒рпНро▒ро┐роХрпН роХродрпИроХро│рпН:
тЬЕ роЗроирпНрод роЖрогрпНроЯрпБ 15 рокрпБродро┐роп роЖро░роорпНрок роЪрпБроХро╛родро╛ро░ роиро┐ро▓рпИропроЩрпНроХро│рпН родро┐ро▒роХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│рой.
тЬЕ рооро░рпБродрпНродрпБро╡ро░рпН-роирпЛропро╛ро│ро┐ ро╡ро┐роХро┐родродрпНродро┐ро▓рпН 40% роЕродро┐роХро░ро┐рокрпНрокрпБ.
тЬЕ родро╛ропрпНро╡ро┤ро┐ роЗро▒рокрпНрокрпБ ро╡ро┐роХро┐родроорпН 25% роХрпБро▒рпИроХрпНроХрокрпНрокроЯрпНроЯродрпБ.

роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЪрпБроХро╛родро╛ро░ роЪро╡ро╛ро▓рпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ ро╡ро┐ро╡ро╛родро┐роХрпНроХродрпН родропро╛ро░ро╛?""";
    }

    if (message.contains('opposition') || message.contains('criticism') || message.contains('respond to')) {
      return """Handling Opposition Criticism:

ЁЯОп Response Strategy Framework:
1. Acknowledge & Redirect: Understand the concern and shift focus to your actions and solutions.
2. Fact-Based Defense: Use clear data and evidence to support your position.
3. Positive Positioning: Highlight achievements and share your future vision.

Key Principle: Stay factual, avoid personal attacks, and show empathy for public concerns.

Need help with specific criticism scenarios?

--- (родрооро┐ро┤рпН) ---

роОродро┐ро░рпНроХрпНроХроЯрпНроЪро┐ ро╡ро┐рооро░рпНроЪройроЩрпНроХро│рпИроХрпН роХрпИропро╛ро│рпБродро▓рпН:

ЁЯОп рокродро┐ро▓рпН роЕро│ро┐роХрпНроХрпБроорпН ро╡ро┐ропрпВроХроорпН:
1. роПро▒рпНро▒рпБроХрпНроХрпКрогрпНроЯрпБ родро┐роЪрпИ родро┐ро░рпБрокрпНрокрпБроЩрпНроХро│рпН: роХро╡ро▓рпИропрпИрокрпН рокрпБро░ро┐роирпНродрпБроХрпКрогрпНроЯрпБ, роЙроЩрпНроХро│рпН роЪрпЖропро▓рпНроХро│рпН рооро▒рпНро▒рпБроорпН родрпАро░рпНро╡рпБроХро│рпБроХрпНроХрпБ роХро╡ройродрпНродрпИ рооро╛ро▒рпНро▒рпБроЩрпНроХро│рпН.
2. роЙрогрпНроорпИ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой рокро╛родрпБроХро╛рокрпНрокрпБ: роЙроЩрпНроХро│рпН роиро┐ро▓рпИропрпИ роЖродро░ро┐роХрпНроХ родрпЖро│ро┐ро╡ро╛рой родро░ро╡рпБ рооро▒рпНро▒рпБроорпН роЖродро╛ро░роЩрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.
3. роирпЗро░рпНрооро▒рпИропро╛рой роиро┐ро▓рпИрокрпНрокро╛роЯрпБ: роЪро╛родройрпИроХро│рпИ роорпБройрпНройро┐ро▓рпИрокрпНрокроЯрпБродрпНродро┐, роЙроЩрпНроХро│рпН роОродро┐ро░рпНроХро╛ро▓рокрпН рокро╛ро░рпНро╡рпИропрпИрокрпН рокроХро┐ро░рпНроирпНродрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН.

роорпБроХрпНроХро┐роп роХрпКро│рпНроХрпИ: роЙрогрпНроорпИропро╛роХ роЗро░рпБроЩрпНроХро│рпН, родройро┐рокрпНрокроЯрпНроЯ родро╛роХрпНроХрпБродро▓рпНроХро│рпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН, рокрпКродрпБ роороХрпНроХро│ро┐ройрпН роХро╡ро▓рпИроХро│рпБроХрпНроХрпБ рокроЪрпНроЪро╛родро╛рокроорпН роХро╛роЯрпНроЯрпБроЩрпНроХро│рпН.

роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ ро╡ро┐рооро░рпНроЪройроЪрпН роЪрпВро┤рпНроиро┐ро▓рпИроХро│рпБроХрпНроХрпБ роЙродро╡ро┐ родрпЗро╡рпИропро╛?""";
    }

    if (message.contains('environment') || message.contains('pollution') || message.contains('green')) {
      return """Environmental Strategy & Talking Points:

ЁЯМ▒ Priorities:
1. Air Quality: Industrial emission monitoring, green belt development.
2. Water Conservation: Rainwater harvesting, river restoration.
3. Waste Management: Plastic ban enforcement, waste-to-energy projects.

Immediate Actions:
тЬЕ тВ╣500 crore for air quality monitoring.
тЬЕ 50 new sewage treatment plants.
тЬЕ Solar panel subsidies for homes.

Want specific strategies for your constituency?

--- (родрооро┐ро┤рпН) ---

роЪрпБро▒рпНро▒рпБроЪрпНроЪрпВро┤ро▓рпН ро╡ро┐ропрпВроХроорпН рооро▒рпНро▒рпБроорпН роорпБроХрпНроХро┐роп роЕроорпНроЪроЩрпНроХро│рпН:

ЁЯМ▒ роорпБройрпНройрпБро░ро┐роорпИроХро│рпН:
1. роХро╛ро▒рпНро▒ро┐ройрпН родро░роорпН: родрпКро┤ро┐ро▓рпНродрпБро▒рпИ роЙрооро┐ро┤рпНро╡рпИроХрпН роХрогрпНроХро╛рогро┐родрпНродро▓рпН, рокроЪрпБроорпИрокрпН рокроХрпБродро┐роХро│рпИ роЙро░рпБро╡ро╛роХрпНроХрпБродро▓рпН.
2. роирпАро░рпН рокро╛родрпБроХро╛рокрпНрокрпБ: рооро┤рпИроирпАро░рпН роЪрпЗроХро░ро┐рокрпНрокрпБ, роиродро┐ рокрпБройро░роорпИрокрпНрокрпБ.
3. роХро┤ро┐ро╡рпБ роорпЗро▓ро╛рогрпНроорпИ: рокро┐ро│ро╛ро╕рпНроЯро┐роХрпН родроЯрпИ роЕрооро▓ро╛роХрпНроХроорпН, роХро┤ро┐ро╡ро┐ро▓ро┐ро░рпБроирпНродрпБ роЖро▒рпНро▒ро▓рпН родро┐роЯрпНроЯроЩрпНроХро│рпН.

роЙроЯройроЯро┐ роироЯро╡роЯро┐роХрпНроХрпИроХро│рпН:
тЬЕ роХро╛ро▒рпНро▒ро┐ройрпН родро░ роХрогрпНроХро╛рогро┐рокрпНрокрпБроХрпНроХрпБ тВ╣500 роХрпЛроЯро┐.
тЬЕ 50 рокрпБродро┐роп роХро┤ро┐ро╡рпБроирпАро░рпН роЪрпБродрпНродро┐роХро░ро┐рокрпНрокрпБ роиро┐ро▓рпИропроЩрпНроХро│рпН.
тЬЕ ро╡рпАроЯрпБроХро│рпБроХрпНроХрпБ роЪрпЛро▓ро╛ро░рпН рокрпЗройро▓рпН рооро╛ройро┐ропроЩрпНроХро│рпН.

роЙроЩрпНроХро│рпН родрпКроХрпБродро┐роХрпНроХрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ ро╡ро┐ропрпВроХроЩрпНроХро│рпН ро╡рпЗрогрпНроЯрпБрооро╛?""";
    }

    // Default response
    return """I understand. I can help you with:

ЁЯПЫя╕П Political Strategy & Communication
ЁЯУК Issues & Analytics
ЁЯЧгя╕П Campaign Support

Please be more specific about what you need assistance with.

--- (родрооро┐ро┤рпН) ---

роиро╛ройрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНроХро┐ро▒рпЗройрпН. роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡роХрпНроХрпВроЯро┐роп роЪро┐ро▓ ро╡ро┐ро╖ропроЩрпНроХро│рпН:

ЁЯПЫя╕П роЕро░роЪро┐ропро▓рпН роЙродрпНродро┐ рооро▒рпНро▒рпБроорпН родроХро╡ро▓рпН родрпКроЯро░рпНрокрпБ
ЁЯУК рокро┐ро░роЪрпНроЪройрпИроХро│рпН рооро▒рпНро▒рпБроорпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ
ЁЯЧгя╕П рокро┐ро░роЪрпНроЪро╛ро░ роЖродро░ро╡рпБ

роЙроЩрпНроХро│рпБроХрпНроХрпБ роОроирпНрод ржмрж┐рж╖рзЯрзЗ роЙродро╡ро┐ ро╡рпЗрогрпНроЯрпБроорпН роОройрпНро▒рпБ роЗройрпНройрпБроорпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯрпБ роХрпВро▒ роорпБроЯро┐ропрпБрооро╛?""";
  }
  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

 @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(
            Icons.arrow_back_ios_new,
            color: Colors.blue,
          ),
          onPressed: () => Navigator.of(context).pop(),
        ),
        backgroundColor: Colors.white,
        centerTitle: false,
        title: const Text(
          'Klydra AI Assistant',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: Color.fromARGB(255, 1, 46, 117),
            fontSize: 25,
          ),
        ),
        // NEW: Language selection menu
        actions: [
          PopupMenuButton<String>(
            icon: const Icon(Icons.language, color: Colors.blue),
            onSelected: (String languageCode) {
              setState(() {
                selectedLanguage = languageCode;
              });
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                content: Text(
                    'Language changed to ${languageCode == 'en-US' ? 'English' : 'Tamil'}'),
              ));
            },
            itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
              const PopupMenuItem<String>(
                value: 'en-US',
                child: Text('English'),
              ),
              const PopupMenuItem<String>(
                value: 'ta-IN',
                child: Text('родрооро┐ро┤рпН (Tamil)'),
              ),
            ],
          ),
        ],
      ),
      backgroundColor: const Color(0xFFF8FAFC),
      body: SafeArea(
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: Column(
            children: [
              _buildQuickAccessQuestions(),
              Expanded(child: _buildChatArea()),
              _buildInputArea(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildQuickAccessQuestions() {
    return Container(
      height: 130,
      padding: const EdgeInsets.symmetric(vertical: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Padding(
            padding: EdgeInsets.symmetric(horizontal: 20),
            child: Text(
              'Quick Access Questions',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Color(0xFF1E293B),
              ),
            ),
          ),
          const SizedBox(height: 12),
          Expanded(
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(horizontal: 20),
              itemCount: quickAccessQuestions.length,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () => _sendMessage(quickAccessQuestions[index]),
                  child: Container(
                    margin: const EdgeInsets.only(right: 12),
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(20),
                      border: Border.all(color: const Color(0xFF3B82F6).withOpacity(0.2)),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.05),
                          blurRadius: 8,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Row(
                      children: [
                        const Icon(
                          Icons.help_outline,
                          color: Color(0xFF3B82F6),
                          size: 16,
                        ),
                        const SizedBox(width: 8),
                        ConstrainedBox(
                          constraints: const BoxConstraints(maxWidth: 200),
                          child: Text(
                            quickAccessQuestions[index],
                            style: const TextStyle(
                              fontSize: 12,
                              color: Color(0xFF3B82F6),
                              fontWeight: FontWeight.w500,
                            ),
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildChatArea() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: ListView.builder(
        controller: _scrollController,
        itemCount: messages.length + (isTyping ? 1 : 0),
        itemBuilder: (context, index) {
          if (index == messages.length && isTyping) {
            return _buildTypingIndicator();
          }
          
          final message = messages[index];
          return _buildMessageBubble(message);
        },
      ),
    );
  }

  Widget _buildMessageBubble(ChatMessage message) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisAlignment: message.isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
        children: [
          if (!message.isUser) ...[
            Container(
              width: 40,
              height: 40,
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFF3B82F6), Color(0xFF8B5CF6)],
                ),
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Icon(
                Icons.psychology,
                color: Colors.white,
                size: 20,
              ),
            ),
            const SizedBox(width: 12),
          ],
          
          Flexible(
            child: Column(
              crossAxisAlignment: message.isUser ? CrossAxisAlignment.end : CrossAxisAlignment.start,
              children: [
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: message.isUser ? 
                      const Color(0xFF3B82F6) : Colors.white,
                    borderRadius: BorderRadius.circular(16).copyWith(
                      bottomLeft: message.isUser ? const Radius.circular(16) : const Radius.circular(4),
                      bottomRight: message.isUser ? const Radius.circular(4) : const Radius.circular(16),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.05),
                        blurRadius: 10,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        message.text,
                        style: TextStyle(
                          fontSize: 14,
                          color: message.isUser ? Colors.white : const Color(0xFF1E293B),
                          height: 1.5,
                        ),
                      ),
                      if (!message.isUser) ...[
                        const SizedBox(height: 12),
                        Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            GestureDetector(
                              onTap: () => _speakMessage(message.text),
                              child: Container(
                                padding: const EdgeInsets.all(8),
                                decoration: BoxDecoration(
                                  color: isSpeaking && currentSpeakingMessage == message.text ? 
                                    const Color(0xFFEF4444).withOpacity(0.1) : 
                                    const Color(0xFF3B82F6).withOpacity(0.1),
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    Icon(
                                      isSpeaking && currentSpeakingMessage == message.text ? 
                                        Icons.stop : Icons.volume_up,
                                      color: isSpeaking && currentSpeakingMessage == message.text ? 
                                        const Color(0xFFEF4444) : const Color(0xFF3B82F6),
                                      size: 16,
                                    ),
                                    const SizedBox(width: 4),
                                    Text(
                                      isSpeaking && currentSpeakingMessage == message.text ? 
                                        'Stop' : 'Listen',
                                      style: TextStyle(
                                        color: isSpeaking && currentSpeakingMessage == message.text ? 
                                          const Color(0xFFEF4444) : const Color(0xFF3B82F6),
                                        fontSize: 12,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                            const SizedBox(width: 8),
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                              decoration: BoxDecoration(
                                color: const Color(0xFF10B981).withOpacity(0.1),
                                borderRadius: BorderRadius.circular(6),
                              ),
                              child: Text(
                                selectedLanguage,
                                style: const TextStyle(
                                  color: Color(0xFF10B981),
                                  fontSize: 10,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ],
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  _formatTime(message.timestamp),
                  style: const TextStyle(
                    fontSize: 10,
                    color: Color(0xFF64748B),
                  ),
                ),
              ],
            ),
          ),
          
          if (message.isUser) ...[
            const SizedBox(width: 12),
            Container(
              width: 40,
              height: 40,
              decoration: BoxDecoration(
                color: const Color(0xFF10B981),
                borderRadius: BorderRadius.circular(20),
              ),
              child: const Icon(
                Icons.person,
                color: Colors.white,
                size: 20,
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildTypingIndicator() {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                colors: [Color(0xFF3B82F6), Color(0xFF8B5CF6)],
              ),
              borderRadius: BorderRadius.circular(20),
            ),
            child: const Icon(
              Icons.psychology,
              color: Colors.white,
              size: 20,
            ),
          ),
          const SizedBox(width: 12),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
                bottomRight: Radius.circular(16),
                bottomLeft: Radius.circular(4),
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 10,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                SizedBox(
                  width: 40,
                  height: 20,
                  child: AnimatedBuilder(
                    animation: _typingAnimation,
                    builder: (context, child) {
                      return Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          _buildDot(0),
                          _buildDot(1),
                          _buildDot(2),
                        ],
                      );
                    },
                  ),
                ),
                const SizedBox(width: 8),
                const Text(
                  'AI is thinking...',
                  style: TextStyle(
                    fontSize: 12,
                    color: Color(0xFF64748B),
                    fontStyle: FontStyle.italic,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDot(int index) {
    final delay = index * 0.3;
    final animationValue = (_typingAnimation.value - delay).clamp(0.0, 1.0);
    final scale = math.sin(animationValue * math.pi);
    
    return Transform.scale(
      scale: 0.5 + (scale * 0.5),
      child: Container(
        width: 6,
        height: 6,
        decoration: const BoxDecoration(
          color: Color(0xFF3B82F6),
          shape: BoxShape.circle,
        ),
      ),
    );
  }

  Widget _buildInputArea() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: const BoxDecoration(
        color: Colors.white,
        border: Border(
          top: BorderSide(color: Color(0xFFE2E8F0), width: 1),
        ),
      ),
      child: Row(
        children: [
          Expanded(
            child: Container(
              decoration: BoxDecoration(
                color: const Color(0xFFF8FAFC),
                borderRadius: BorderRadius.circular(25),
                border: Border.all(color: const Color(0xFFE2E8F0)),
              ),
              child: TextField(
                controller: _messageController,
                decoration: const InputDecoration(
                  hintText: 'Ask me about political strategy, issues, or advice...',
                  border: InputBorder.none,
                  contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                  hintStyle: TextStyle(
                    color: Color(0xFF64748B),
                    fontSize: 14,
                  ),
                ),
                maxLines: null,
                textInputAction: TextInputAction.send,
                onSubmitted: _sendMessage,
              ),
            ),
          ),
          const SizedBox(width: 12),
          GestureDetector(
            onTap: () => _sendMessage(_messageController.text),
            child: Container(
              width: 50,
              height: 50,
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFF3B82F6), Color(0xFF8B5CF6)],
                ),
                borderRadius: BorderRadius.circular(25),
                boxShadow: [
                  BoxShadow(
                    color: const Color(0xFF3B82F6).withOpacity(0.3),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: const Icon(
                Icons.send,
                color: Colors.white,
                size: 20,
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _formatTime(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    
    if (difference.inMinutes < 1) {
      return 'Just now';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes}m ago';
    } else if (difference.inHours < 24) {
      return '${difference.inHours}h ago';
    } else {
      return '${difference.inDays}d ago';
    }
  }
}

class ChatMessage {
  final String text;
  final bool isUser;
  final DateTime timestamp;

  ChatMessage({
    required this.text,
    required this.isUser,
    required this.timestamp,
  });
}